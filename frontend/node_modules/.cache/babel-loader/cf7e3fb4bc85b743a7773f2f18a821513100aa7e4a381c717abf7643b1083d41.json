{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nclass NotificationService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n  }\n  connect(callback) {\n    const socket = new SockJS('http://localhost:8080/ws');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      this.connected = true;\n      console.log('Connected to WebSocket');\n\n      // Subscribe to notifications\n      this.stompClient.subscribe('/topic/notifications', message => {\n        const notification = JSON.parse(message.body);\n        callback({\n          type: 'new_request',\n          data: notification\n        });\n      });\n    }, error => {\n      console.error('WebSocket connection error:', error);\n      this.connected = false;\n    });\n  }\n  disconnect() {\n    if (this.stompClient && this.connected) {\n      this.stompClient.disconnect();\n      this.connected = false;\n      console.log('Disconnected from WebSocket');\n    }\n  }\n  isConnected() {\n    return this.connected;\n  }\n}\nconst notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"names":["SockJS","Client","NotificationService","constructor","stompClient","connected","connect","callback","socket","Stomp","over","console","log","subscribe","message","notification","JSON","parse","body","type","data","error","disconnect","isConnected","notificationService"],"sources":["/Users/admin/happygo/frontend/src/services/NotificationService.js"],"sourcesContent":["import SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\n\nclass NotificationService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n  }\n\n  connect(callback) {\n    const socket = new SockJS('http://localhost:8080/ws');\n    this.stompClient = Stomp.over(socket);\n    \n    this.stompClient.connect({}, () => {\n      this.connected = true;\n      console.log('Connected to WebSocket');\n      \n      // Subscribe to notifications\n      this.stompClient.subscribe('/topic/notifications', (message) => {\n        const notification = JSON.parse(message.body);\n        callback({\n          type: 'new_request',\n          data: notification\n        });\n      });\n    }, (error) => {\n      console.error('WebSocket connection error:', error);\n      this.connected = false;\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient && this.connected) {\n      this.stompClient.disconnect();\n      this.connected = false;\n      console.log('Disconnected from WebSocket');\n    }\n  }\n\n  isConnected() {\n    return this.connected;\n  }\n}\n\nconst notificationService = new NotificationService();\nexport default notificationService;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,MAAMC,mBAAmB,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;EACxB;EAEAC,OAAOA,CAACC,QAAQ,EAAE;IAChB,MAAMC,MAAM,GAAG,IAAIR,MAAM,CAAC,0BAA0B,CAAC;IACrD,IAAI,CAACI,WAAW,GAAGK,KAAK,CAACC,IAAI,CAACF,MAAM,CAAC;IAErC,IAAI,CAACJ,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MACjC,IAAI,CAACD,SAAS,GAAG,IAAI;MACrBM,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;MAErC;MACA,IAAI,CAACR,WAAW,CAACS,SAAS,CAAC,sBAAsB,EAAGC,OAAO,IAAK;QAC9D,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QAC7CX,QAAQ,CAAC;UACPY,IAAI,EAAE,aAAa;UACnBC,IAAI,EAAEL;QACR,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,EAAGM,KAAK,IAAK;MACZV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,IAAI,CAAChB,SAAS,GAAG,KAAK;IACxB,CAAC,CAAC;EACJ;EAEAiB,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAAClB,WAAW,IAAI,IAAI,CAACC,SAAS,EAAE;MACtC,IAAI,CAACD,WAAW,CAACkB,UAAU,CAAC,CAAC;MAC7B,IAAI,CAACjB,SAAS,GAAG,KAAK;MACtBM,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C;EACF;EAEAW,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAClB,SAAS;EACvB;AACF;AAEA,MAAMmB,mBAAmB,GAAG,IAAItB,mBAAmB,CAAC,CAAC;AACrD,eAAesB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
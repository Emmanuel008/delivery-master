{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Client as StompClient } from '@stomp/stompjs';\nclass NotificationService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n  }\n  connect(callback) {\n    const socketFactory = () => new SockJS('http://localhost:8080/ws');\n    this.stompClient = new StompClient({\n      webSocketFactory: socketFactory,\n      reconnectDelay: 5000,\n      onConnect: () => {\n        this.connected = true;\n        console.log('Connected to WebSocket');\n        this.stompClient.subscribe('/topic/notifications', message => {\n          const notification = JSON.parse(message.body);\n          callback({\n            type: 'new_request',\n            data: notification\n          });\n        });\n      },\n      onStompError: frame => {\n        console.error('Broker reported error:', frame.headers['message']);\n        console.error('Additional details:', frame.body);\n      },\n      onWebSocketClose: () => {\n        this.connected = false;\n        console.warn('WebSocket connection closed');\n      },\n      debug: () => {}\n    });\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n      this.connected = false;\n      console.log('Disconnected from WebSocket');\n    }\n  }\n  isConnected() {\n    return this.connected;\n  }\n}\nexport default new NotificationService();","map":{"version":3,"names":["SockJS","Client","StompClient","NotificationService","constructor","stompClient","connected","connect","callback","socketFactory","webSocketFactory","reconnectDelay","onConnect","console","log","subscribe","message","notification","JSON","parse","body","type","data","onStompError","frame","error","headers","onWebSocketClose","warn","debug","activate","disconnect","deactivate","isConnected"],"sources":["/Users/admin/happygo/frontend/src/services/NotificationService.js"],"sourcesContent":["import SockJS from 'sockjs-client';\nimport { Client as StompClient } from '@stomp/stompjs';\n\nclass NotificationService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n  }\n\n  connect(callback) {\n    const socketFactory = () => new SockJS('http://localhost:8080/ws');\n    this.stompClient = new StompClient({\n      webSocketFactory: socketFactory,\n      reconnectDelay: 5000,\n      onConnect: () => {\n        this.connected = true;\n        console.log('Connected to WebSocket');\n        this.stompClient.subscribe('/topic/notifications', (message) => {\n          const notification = JSON.parse(message.body);\n          callback({\n            type: 'new_request',\n            data: notification\n          });\n        });\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error:', frame.headers['message']);\n        console.error('Additional details:', frame.body);\n      },\n      onWebSocketClose: () => {\n        this.connected = false;\n        console.warn('WebSocket connection closed');\n      },\n      debug: () => {}\n    });\n    this.stompClient.activate();\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n      this.connected = false;\n      console.log('Disconnected from WebSocket');\n    }\n  }\n\n  isConnected() {\n    return this.connected;\n  }\n}\n\nexport default new NotificationService();\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,IAAIC,WAAW,QAAQ,gBAAgB;AAEtD,MAAMC,mBAAmB,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;EACxB;EAEAC,OAAOA,CAACC,QAAQ,EAAE;IAChB,MAAMC,aAAa,GAAGA,CAAA,KAAM,IAAIT,MAAM,CAAC,0BAA0B,CAAC;IAClE,IAAI,CAACK,WAAW,GAAG,IAAIH,WAAW,CAAC;MACjCQ,gBAAgB,EAAED,aAAa;MAC/BE,cAAc,EAAE,IAAI;MACpBC,SAAS,EAAEA,CAAA,KAAM;QACf,IAAI,CAACN,SAAS,GAAG,IAAI;QACrBO,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC,IAAI,CAACT,WAAW,CAACU,SAAS,CAAC,sBAAsB,EAAGC,OAAO,IAAK;UAC9D,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;UAC7CZ,QAAQ,CAAC;YACPa,IAAI,EAAE,aAAa;YACnBC,IAAI,EAAEL;UACR,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC;MACDM,YAAY,EAAGC,KAAK,IAAK;QACvBX,OAAO,CAACY,KAAK,CAAC,wBAAwB,EAAED,KAAK,CAACE,OAAO,CAAC,SAAS,CAAC,CAAC;QACjEb,OAAO,CAACY,KAAK,CAAC,qBAAqB,EAAED,KAAK,CAACJ,IAAI,CAAC;MAClD,CAAC;MACDO,gBAAgB,EAAEA,CAAA,KAAM;QACtB,IAAI,CAACrB,SAAS,GAAG,KAAK;QACtBO,OAAO,CAACe,IAAI,CAAC,6BAA6B,CAAC;MAC7C,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAM,CAAC;IAChB,CAAC,CAAC;IACF,IAAI,CAACxB,WAAW,CAACyB,QAAQ,CAAC,CAAC;EAC7B;EAEAC,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC1B,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAAC2B,UAAU,CAAC,CAAC;MAC7B,IAAI,CAAC1B,SAAS,GAAG,KAAK;MACtBO,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C;EACF;EAEAmB,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC3B,SAAS;EACvB;AACF;AAEA,eAAe,IAAIH,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}